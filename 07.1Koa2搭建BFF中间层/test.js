/**
 * 前后的分离的目的就是专人做专事
 * 前端 去 展现试图
 * 后端 去 提供业务数据
 * 即便使用了node中间层，上述的逻辑依然没变
 */
/**
 * 传统的vue项目流程：
 *      请求服务 -> 把文件（js、html等）给用户 -> 用户执行文件，通过js渲染出页面
 * 这样会带来一些弊端 ->
 * 1. 把渲染的压力给到了用户的计算机，使得无法带来极致的用户体验
 * 2. seo问题，传统的vue或者react项目的html里面的内容很少，搜索引擎的爬虫会判断无价值
 * 对于toC的项目上述两点非常重要
 *
 * bff的速度会更快，因为浏览器直接渲染html，基本不执行js代码，所以给用户很好的体验
 * 小型的toC项目，使用vue/react 进行ssr渲染（也是一个中间层，只不过成本更低）
 * 为什么使用node？
 * 1. node高并发模板渲染能力很强，但是计算能力很差
 * 2. node一般不用于数据处理后端
 * 3. node写法和前端js写法一样
 * 所以用 node 做bff中间层就很合适
 */